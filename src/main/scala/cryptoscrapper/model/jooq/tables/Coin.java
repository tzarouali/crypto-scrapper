/*
 * This file is generated by jOOQ.
 */
package cryptoscrapper.model.jooq.tables;


import cryptoscrapper.model.jooq.Keys;
import cryptoscrapper.model.jooq.Public;
import cryptoscrapper.model.jooq.tables.records.CoinRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coin extends TableImpl<CoinRecord> {

    private static final long serialVersionUID = 1391849379;

    /**
     * The reference instance of <code>public.coin</code>
     */
    public static final Coin COIN = new Coin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoinRecord> getRecordType() {
        return CoinRecord.class;
    }

    /**
     * The column <code>public.coin.id</code>.
     */
    public final TableField<CoinRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('coin_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.coin.symbol</code>.
     */
    public final TableField<CoinRecord, String> SYMBOL = createField(DSL.name("symbol"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.coin.name</code>.
     */
    public final TableField<CoinRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>public.coin</code> table reference
     */
    public Coin() {
        this(DSL.name("coin"), null);
    }

    /**
     * Create an aliased <code>public.coin</code> table reference
     */
    public Coin(String alias) {
        this(DSL.name(alias), COIN);
    }

    /**
     * Create an aliased <code>public.coin</code> table reference
     */
    public Coin(Name alias) {
        this(alias, COIN);
    }

    private Coin(Name alias, Table<CoinRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coin(Name alias, Table<CoinRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Coin(Table<O> child, ForeignKey<O, CoinRecord> key) {
        super(child, key, COIN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CoinRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COIN;
    }

    @Override
    public UniqueKey<CoinRecord> getPrimaryKey() {
        return Keys.COIN_PKEY;
    }

    @Override
    public List<UniqueKey<CoinRecord>> getKeys() {
        return Arrays.<UniqueKey<CoinRecord>>asList(Keys.COIN_PKEY, Keys.COIN_SYMBOL_KEY);
    }

    @Override
    public Coin as(String alias) {
        return new Coin(DSL.name(alias), this);
    }

    @Override
    public Coin as(Name alias) {
        return new Coin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coin rename(String name) {
        return new Coin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coin rename(Name name) {
        return new Coin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
